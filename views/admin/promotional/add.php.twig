{% extends "/templates/admin.php.twig" %}

{% block title %}Crear producto promocional{% endblock %}

{% block name %}Crear producto promocional{% endblock %}
{% block content %}
    <div class="max-w-lg mx-auto bg-white rounded-2xl p-8">
        <form action="/admin/promotional/add" method="POST" enctype="multipart/form-data" class="flex flex-col gap-4" id="promoForm">
            <div>
                <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Nombre</label>
                <input type="text" id="name" name="name" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div>
                <label for="category" class="block text-gray-700 text-sm font-bold mb-2">Categoría</label>
                <select id="category" name="category" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <option value="none">Sin categoría</option>
                    {% for category in categories %}
                        <option value="{{ category.id }}">{{ category.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div>
                <label for="description" class="block text-gray-700 text-sm font-bold mb-2">Descripción</label>
                <textarea id="description" name="description" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
            </div>
            <div>
                <label for="image" class="block text-gray-700 text-sm font-bold mb-2">Imagen</label>
                <file-upload id="imgUpload" name="image" class="w-full" accept-image="true" accept-video="false" image-aspect-ratio="1:1" min-image-width="512" min-image-height="512" max-image-width="2048" max-image-height="2048"></file-upload>
            </div>
            <div>
                <label for="price" class="block text-gray-700 text-sm font-bold mb-2">Precio</label>
                <input type="number" id="price" name="price" required step="0.01" min="0" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            
            <button type="submit" class="btn primary flex items-center gap-2"><i data-feather="plus-square"></i> Crear producto promocional</button>
        </form>
    </div>
{% endblock %}
{% block scripts %}
<script src="/assets/js/components/fileUpload.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- COMPONENTES DINÁMICOS ---
        const componentsContainer = document.getElementById('componentsContainer');
        const addComponentBtn = document.getElementById('addComponentBtn');
        function updateRemoveComponentButtons() {
            const rows = componentsContainer.querySelectorAll('.component-row');
            rows.forEach((row, idx) => {
                const btn = row.querySelector('.remove-component-btn');
                btn.style.display = (rows.length > 1) ? '' : 'none';
            });
        }
        addComponentBtn.addEventListener('click', function() {
            const firstRow = componentsContainer.querySelector('.component-row');
            const newRow = firstRow.cloneNode(true);
            newRow.querySelector('.component-type-select').value = 'product';
            newRow.querySelector('.component-product-select').style.display = '';
            // Limpiar selección múltiple correctamente
            Array.from(newRow.querySelector('.component-product-select').options).forEach(opt => opt.selected = false);
            newRow.querySelector('.component-category-select').style.display = 'none';
            newRow.querySelector('.component-category-select').selectedIndex = 0;
            newRow.querySelector('.component-category-filter').style.display = '';
            newRow.querySelector('.component-category-filter').selectedIndex = 0;
            newRow.querySelector('.remove-component-btn').style.display = '';
            componentsContainer.appendChild(newRow);
            updateRemoveComponentButtons();
        });
        componentsContainer.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-component-btn')) {
                const rows = componentsContainer.querySelectorAll('.component-row');
                if (rows.length > 1) {
                    e.target.closest('.component-row').remove();
                    updateRemoveComponentButtons();
                }
            }
        });
        componentsContainer.addEventListener('change', function(e) {
            if (e.target.classList.contains('component-type-select')) {
                const row = e.target.closest('.component-row');
                if (e.target.value === 'product') {
                    row.querySelector('.component-product-select').style.display = '';
                    row.querySelector('.component-category-select').style.display = 'none';
                    row.querySelector('.component-category-filter').style.display = '';
                } else {
                    row.querySelector('.component-product-select').style.display = 'none';
                    row.querySelector('.component-category-select').style.display = '';
                    row.querySelector('.component-category-filter').style.display = 'none';
                }
            }
            if (e.target.classList.contains('component-product-select')) {
                // Permitir selección múltiple con Ctrl/Cmd/Shift
                // No es necesario código extra, pero forzamos el focus
                e.target.focus();
            }
            if (e.target.classList.contains('component-category-filter')) {
                const row = e.target.closest('.component-row');
                const filterValue = e.target.value;
                const productSelect = row.querySelector('.component-product-select');
                Array.from(productSelect.options).forEach(opt => {
                    if (!filterValue || opt.dataset.category === filterValue) {
                        opt.style.display = '';
                    } else {
                        opt.style.display = 'none';
                        opt.selected = false;
                    }
                });
            }
        });
        updateRemoveComponentButtons();
        // --- VALIDACIÓN Y ENVÍO ---
        const form = document.getElementById('promoForm');
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(form);
            // Imagen desde file-upload
            const imgUpload = document.getElementById('imgUpload');
            if (!imgUpload || !imgUpload.getFileInput || !imgUpload.getFileInput()[0]) {
                alert('Debes subir una imagen para el producto promocional.');
                return;
            }
            if (imgUpload && imgUpload.getFileInput && imgUpload.getFileInput()[0]) {
                formData.append('image', imgUpload.getFileInput()[0]);
            }
            // Componentes: productos o categorías
            formData.delete('components[]');
            const rows = componentsContainer.querySelectorAll('.component-row');
            let valid = true;
            let totalComponents = 0;
            rows.forEach(row => {
                const type = row.querySelector('.component-type-select').value;
                let ids = [];
                if (type === 'product') {
                    const productSelect = row.querySelector('.component-product-select');
                    const selectedOptions = Array.from(productSelect.options).filter(opt => opt.selected && opt.style.display !== 'none');
                    if (selectedOptions.length) {
                        ids = selectedOptions.map(opt => opt.value);
                        totalComponents += ids.length;
                    } else {
                        valid = false;
                    }
                } else {
                    const categorySelect = row.querySelector('.component-category-select');
                    const selectedCategory = categorySelect.value;
                    if (selectedCategory) {
                        ids.push(selectedCategory);
                        totalComponents++;
                    } else {
                        valid = false;
                    }
                }
                if (ids.length) {
                    formData.append('components[]', JSON.stringify({ type, ids }));
                }
            });
            if (!valid || totalComponents < 1) {
                alert('Debes seleccionar al menos un producto o categoría como componente.');
                return;
            }
            // Validación de campos según configuración
            const discountEnabled = {{ config.DISCOUNT_ENABLED ? 'true' : 'false' }};
            const fidelityEnabled = {{ config.FIDELITY_ENABLED ? 'true' : 'false' }};
            const promoCode = form.querySelector('#promo_code') ? form.querySelector('#promo_code').value.trim() : '';
            const loyaltyPoints = form.querySelector('#loyalty_points') ? form.querySelector('#loyalty_points').value.trim() : '';
            if (discountEnabled && !fidelityEnabled && !promoCode) {
                alert('El código promocional es obligatorio.');
                return;
            }
            if (fidelityEnabled && !discountEnabled && !loyaltyPoints) {
                alert('Los puntos de fidelización son obligatorios.');
                return;
            }
            if (discountEnabled && fidelityEnabled && !promoCode && !loyaltyPoints) {
                alert('Debes rellenar al menos el código promocional o los puntos de fidelización.');
                return;
            }
            // Validación de código promocional único (AJAX, si se ha introducido)
            const promoCodeError = document.getElementById('promoCodeError');
            if (promoCode) {
                fetch(`/admin/promotional/check-code?code=${encodeURIComponent(promoCode)}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data.exists) {
                            promoCodeError.classList.remove('hidden');
                            return;
                        } else {
                            promoCodeError.classList.add('hidden');
                            submitPromoForm(formData);
                        }
                    });
            } else {
                submitPromoForm(formData);
            }
        });
        function submitPromoForm(formData) {
            fetch('/admin/promotional/add', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    window.location.href = '/admin/promotional';
                } else {
                    alert('Error al crear el producto promocional: ' + (data.message || 'Error desconocido'));
                }
            })
            .catch(error => {
                console.error('Error en la solicitud:', error);
                alert('Error en la solicitud. Por favor, inténtalo de nuevo más tarde.');
            });
        }
    });
</script>
{% endblock %}
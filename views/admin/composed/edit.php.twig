{% extends "/templates/admin.php.twig" %}

{% block title %}Editar producto compuesto{% endblock %}

{% block name %}Editar producto compuesto{% endblock %}
{% block content %}
    <div class="max-w-lg mx-autop-8">
        <form action="/admin/composed/edit/{{ composed.id }}" method="POST" class="flex flex-col gap-4">
            <div>
                <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Nombre</label>
                <input type="text" id="name" name="name" required value="{{ composed.name }}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div>
                <label class="block text-gray-700 text-sm font-bold mb-2">Componentes</label>
                <div id="componentsContainer" class="flex flex-col gap-2">
                    {% set compList = composed.getChildren() %}
                    {% if compList|length > 0 %}
                        {% for comp in compList %}
                            {% if comp.type == 'group' %}
                                <div class="component-row flex gap-2 items-center">
                                    <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                        <option value="product"{% if comp.items[0].type == 'product' %} selected{% endif %}>Producto</option>
                                        <option value="category"{% if comp.items[0].type == 'category' %} selected{% endif %}>Categoría</option>
                                    </select>
                                    <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px;{% if comp.items[0].type != 'product' %}display:none{% endif %}">
                                        <option value="">Todas</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}">{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px;{% if comp.items[0].type != 'product' %}display:none{% endif %}">
                                        {% set selected_products = [] %}
                                        {% for item in comp.items %}
                                            {% if item.type == 'product' %}
                                                {% set selected_products = selected_products|merge([item.object.id]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {% for product in products %}
                                            {% if product.id != composed.id %}
                                                <option value="{{ product.id }}" data-category="{{ product.category.id }}"{% if product.id in selected_products %} selected{% endif %}>{{ product.name }}</option>
                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                    <select class="component-category-select border rounded px-2 py-1" style="min-width:160px;{% if comp.items[0].type != 'category' %}display:none{% endif %}">
                                        <option value="">Selecciona categoría</option>
                                        {% set selected_categories = [] %}
                                        {% for item in comp.items %}
                                            {% if item.type == 'category' %}
                                                {% set selected_categories = selected_categories|merge([item.object.id]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {% for category in categories %}
                                            <option value="{{ category.id }}"{% if category.id in selected_categories %} selected{% endif %}>{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                                </div>
                            {% else %}
                                <div class="component-row flex gap-2 items-center">
                                    <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                        <option value="product"{% if comp.type == 'product' %} selected{% endif %}>Producto</option>
                                        <option value="category"{% if comp.type == 'category' %} selected{% endif %}>Categoría</option>
                                    </select>
                                    <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px;{% if comp.type != 'product' %}display:none{% endif %}">
                                        <option value="">Todas</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}">{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px;{% if comp.type != 'product' %}display:none{% endif %}">
                                        {% for product in products %}
                                            {% if product.id != composed.id %}
                                                <option value="{{ product.id }}" data-category="{{ product.category.id }}"{% if comp.type == 'product' and product.id == comp.object.id %} selected{% endif %}>{{ product.name }}</option>
                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                    <select class="component-category-select border rounded px-2 py-1" style="min-width:160px;{% if comp.type != 'category' %}display:none{% endif %}">
                                        <option value="">Selecciona categoría</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}"{% if comp.type == 'category' and category.id == comp.object.id %} selected{% endif %}>{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                                </div>
                            {% endif %}
                        {% endfor %}
                    {% else %}
                        <div class="component-row flex gap-2 items-center">
                            <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                <option value="product">Producto</option>
                                <option value="category">Categoría</option>
                            </select>
                            <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px">
                                <option value="">Todas</option>
                                {% for category in categories %}
                                    <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                            <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px">
                                {% for product in products %}
                                    <option value="{{ product.id }}" data-category="{{ product.category.id }}">{{ product.name }}</option>
                                {% endfor %}
                            </select>
                            <select class="component-category-select border rounded px-2 py-1" style="min-width:160px; display:none">
                                <option value="">Selecciona categoría</option>
                                {% for category in categories %}
                                    <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                            <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                        </div>
                    {% endif %}
                </div>
                <button type="button" id="addComponentBtn" class="mt-2 btn secondary flex items-center gap-1"><i data-feather="plus"></i> Añadir componente</button>
            </div>
            <div>
                <label for="image" class="block text-gray-700 text-sm font-bold mb-2">Imagen</label>
                <file-upload id="imgUpload" name="image" class="w-full" accept-image="true" accept-video="false" image-aspect-ratio="1:1" min-image-width="256" min-image-height="256"></file-upload>
            </div>
            <div>
                <label for="description" class="block text-gray-700 text-sm font-bold mb-2">Descripción</label>
                <textarea id="description" name="description" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">{{ composed.description }}</textarea>
            </div>
            <div>
                <label for="price" class="block text-gray-700 text-sm font-bold mb-2">Precio</label>
                <input type="number" id="price" name="price" required step="0.01" min="0" value="{{ composed.price }}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div>
                <label for="category" class="block text-gray-700 text-sm font-bold mb-2">Categoría</label>
                <select id="category" name="category" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <option value="none">Ninguna</option>
                    {% for category in categories %}
                        <option value="{{ category.id }}"{% if composed.category and (composed.category.id is defined and composed.category.id == category.id) or (composed.category == category.id) %} selected{% endif %}>{{ category.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <button type="submit" class="btn primary flex items-center gap-2"><i data-feather="save"></i> Guardar cambios</button>
        </form>
    </div>
{% endblock %}
{% block scripts %}
<script src="/assets/js/components/fileUpload.js"></script>
<script>
(function() {
    const componentsContainer = document.getElementById('componentsContainer');
    const addComponentBtn = document.getElementById('addComponentBtn');
    const form = componentsContainer.closest('form');

    function createComponentRow(type = 'product') {
        const template = componentsContainer.querySelector('.component-row');
        const clone = template.cloneNode(true);
        clone.querySelector('.component-type-select').value = type;
        clone.querySelector('.component-category-filter').value = '';
        clone.querySelector('.component-product-select').selectedIndex = -1;
        clone.querySelector('.component-category-select').selectedIndex = 0;
        updateComponentType(clone, type);
        Array.from(clone.querySelectorAll('option[selected]')).forEach(o => o.selected = false);
        return clone;
    }

    function updateComponentType(row, type) {
        const productSelect = row.querySelector('.component-product-select');
        const categorySelect = row.querySelector('.component-category-select');
        const categoryFilter = row.querySelector('.component-category-filter');
        if (type === 'product') {
            productSelect.style.display = '';
            categorySelect.style.display = 'none';
            if (categoryFilter) categoryFilter.style.display = '';
        } else {
            productSelect.style.display = 'none';
            categorySelect.style.display = '';
            if (categoryFilter) categoryFilter.style.display = 'none';
        }
    }

    function filterProductsByCategory(row, categoryId) {
        const productSelect = row.querySelector('.component-product-select');
        Array.from(productSelect.options).forEach(opt => {
            if (!categoryId || opt.dataset.category === categoryId) {
                opt.style.display = '';
            } else {
                opt.style.display = 'none';
                opt.selected = false;
            }
        });
    }

    // Añadir componente
    addComponentBtn.addEventListener('click', function() {
        const newRow = createComponentRow();
        componentsContainer.appendChild(newRow);
        updateRemoveButtons();
    });

    // Delegación de eventos
    componentsContainer.addEventListener('change', function(e) {
        const row = e.target.closest('.component-row');
        if (e.target.classList.contains('component-type-select')) {
            updateComponentType(row, e.target.value);
        }
        if (e.target.classList.contains('component-category-filter')) {
            filterProductsByCategory(row, e.target.value);
        }
    });

    // Eliminar componente
    componentsContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-component-btn')) {
            const row = e.target.closest('.component-row');
            if (componentsContainer.children.length > 2) {
                row.remove();
                updateRemoveButtons();
            } else {
                alert('Debe haber al menos dos componentes.');
            }
        }
    });

    // Ocultar botón eliminar si hay solo dos componentes
    function updateRemoveButtons() {
        const rows = componentsContainer.querySelectorAll('.component-row');
        rows.forEach(row => {
            const btn = row.querySelector('.remove-component-btn');
            if (rows.length <= 2) {
                btn.style.display = 'none';
            } else {
                btn.style.display = '';
            }
        });
    }
    updateRemoveButtons();

    // --- CARGA INICIAL DE COMPONENTES SELECCIONADOS ---
    {% if components is defined and components|length > 0 %}
    // Limpiar el contenedor y cargar los componentes guardados
    componentsContainer.innerHTML = '';
    const componentsData = [
        {% for comp in components %}
            {% if comp.type == 'group' %}
                {type: '{{ comp.items[0].type }}', ids: [{% for item in comp.items %}'{{ item.object.id }}'{% if not loop.last %}, {% endif %}{% endfor %}]},
            {% else %}
                {type: '{{ comp.type }}', ids: ['{{ comp.object.id }}']},
            {% endif %}
        {% endfor %}
    ];
    componentsData.forEach(function(component) {
        // Crear una nueva fila desde cero para evitar referencias rotas
        const newRow = document.createElement('div');
        newRow.className = 'component-row flex gap-2 items-center';
        newRow.innerHTML = `
            <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                <option value="product">Producto</option>
                <option value="category">Categoría</option>
            </select>
            <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px">
                <option value="">Todas</option>
                {% for category in categories %}
                <option value="{{ category.id }}">{{ category.name }}</option>
                {% endfor %}
            </select>
            <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px">
                {% for product in products %}
                <option value="{{ product.id }}" data-category="{{ product.category.id }}">{{ product.name }}</option>
                {% endfor %}
            </select>
            <select class="component-category-select border rounded px-2 py-1" style="min-width:160px; display:none">
                <option value="">Selecciona categoría</option>
                {% for category in categories %}
                <option value="{{ category.id }}">{{ category.name }}</option>
                {% endfor %}
            </select>
            <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente" style="display:none">&times;</button>
        `;
        // Set tipo
        newRow.querySelector('.component-type-select').value = component.type;
        if (component.type === 'product') {
            newRow.querySelector('.component-product-select').style.display = '';
            newRow.querySelector('.component-category-select').style.display = 'none';
            newRow.querySelector('.component-category-filter').style.display = '';
            // Seleccionar productos
            Array.from(newRow.querySelector('.component-product-select').options).forEach(opt => {
                opt.selected = component.ids.includes(opt.value);
            });
        } else {
            newRow.querySelector('.component-product-select').style.display = 'none';
            newRow.querySelector('.component-category-select').style.display = '';
            newRow.querySelector('.component-category-filter').style.display = 'none';
            // Seleccionar categoría
            newRow.querySelector('.component-category-select').value = component.ids[0] || '';
        }
        newRow.querySelector('.remove-component-btn').style.display = componentsData.length > 1 ? '' : 'none';
        componentsContainer.appendChild(newRow);
    });
    {% endif %}
    // Precarga: filtra productos por categoría si corresponde
    componentsContainer.querySelectorAll('.component-row').forEach(row => {
        const filter = row.querySelector('.component-category-filter');
        if (filter && filter.value) {
            filterProductsByCategory(row, filter.value);
        }
        // Ajusta visibilidad de selects según tipo
        const type = row.querySelector('.component-type-select').value;
        updateComponentType(row, type);
    });

    // AJAX para el submit del formulario
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(form);
        // Imagen desde file-upload (opcional)
        const imgUpload = document.getElementById('imgUpload');
        if (
            imgUpload &&
            typeof imgUpload.getFileInput === 'function' &&
            Array.isArray(imgUpload.getFileInput()) &&
            imgUpload.getFileInput().length > 0 &&
            imgUpload.getFileInput()[0]
        ) {
            formData.append('image', imgUpload.getFileInput()[0]);
        } else {
            // Si no hay imagen, no se envía el campo 'image' (no es obligatoria en edición)
        }
        // Componentes: productos o categorías
        // Elimina todos los posibles campos previos de componentes
        for (let key of Array.from(formData.keys())) {
            if (key === 'components[]' || key === 'components') {
                formData.delete(key);
            }
        }
        const rows = componentsContainer.querySelectorAll('.component-row');
        let valid = true;
        let totalComponents = 0;
        let anyComponent = false;
        let componentsArray = [];
        rows.forEach(row => {
            const type = row.querySelector('.component-type-select').value;
            let ids = [];
            if (type === 'product') {
                const productSelect = row.querySelector('.component-product-select');
                const selectedOptions = Array.from(productSelect.options).filter(opt => opt.selected && opt.style.display !== 'none');
                if (selectedOptions.length) {
                    ids = selectedOptions.map(opt => opt.value);
                    totalComponents += ids.length;
                } else {
                    valid = false;
                }
            } else {
                const categorySelect = row.querySelector('.component-category-select');
                const selectedCategory = categorySelect.value;
                if (selectedCategory) {
                    ids.push(selectedCategory);
                    totalComponents++;
                } else {
                    valid = false;
                }
            }
            if (ids.length) {
                componentsArray.push({ type, ids });
                anyComponent = true;
            }
        });
        if (!anyComponent) {
            alert('Debes añadir al menos un componente.');
            return;
        }
        if (!valid || totalComponents < 2) {
            alert('Debes seleccionar al menos dos productos o categorías en total para los componentes.');
            return;
        }
        // Enviar los componentes como un solo campo JSON
        formData.append('components', JSON.stringify(componentsArray));
        // Envío del formulario
        fetch(form.action, {
            method: form.method,
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                window.location.href = '/admin/composed';
            } else {
                alert('Error al crear el producto compuesto: ' + (data.message || 'Error desconocido'));
            }
        })
        .catch(error => {
            console.error('Error en la solicitud:', error);
            alert('Error en la solicitud. Por favor, inténtalo de nuevo más tarde.');
        });
    });
})();
</script>
{% endblock %}
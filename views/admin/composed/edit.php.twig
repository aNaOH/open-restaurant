{% extends "/templates/admin.php.twig" %}

{% block title %}Editar producto compuesto{% endblock %}

{% block name %}Editar producto compuesto{% endblock %}
{% block content %}
    <div class="max-w-lg mx-auto bg-white rounded-2xl p-8">
        <form action="/admin/composed/edit/{{ composed.id }}" method="POST" class="flex flex-col gap-4">
            <div>
                <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Nombre</label>
                <input type="text" id="name" name="name" required value="{{ composed.name }}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div>
                <label class="block text-gray-700 text-sm font-bold mb-2">Componentes</label>
                <div id="componentsContainer" class="flex flex-col gap-2">
                    {% set compList = composed.getChildren() %}
                    {% if compList|length > 0 %}
                        {% for comp in compList %}
                            {% if comp.type == 'group' %}
                                <div class="component-row flex gap-2 items-center">
                                    <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                        <option value="product"{% if comp.items[0].type == 'product' %} selected{% endif %}>Producto</option>
                                        <option value="category"{% if comp.items[0].type == 'category' %} selected{% endif %}>Categoría</option>
                                    </select>
                                    <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px;{% if comp.items[0].type != 'product' %}display:none{% endif %}">
                                        <option value="">Todas</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}">{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px;{% if comp.items[0].type != 'product' %}display:none{% endif %}">
                                        {% set selected_products = [] %}
                                        {% for item in comp.items %}
                                            {% if item.type == 'product' %}
                                                {% set selected_products = selected_products|merge([item.object.id]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {% for product in products %}
                                            {% if product.id != composed.id %}
                                                <option value="{{ product.id }}" data-category="{{ product.category.id }}"{% if product.id in selected_products %} selected{% endif %}>{{ product.name }}</option>
                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                    <select class="component-category-select border rounded px-2 py-1" style="min-width:160px;{% if comp.items[0].type != 'category' %}display:none{% endif %}">
                                        <option value="">Selecciona categoría</option>
                                        {% set selected_categories = [] %}
                                        {% for item in comp.items %}
                                            {% if item.type == 'category' %}
                                                {% set selected_categories = selected_categories|merge([item.object.id]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {% for category in categories %}
                                            <option value="{{ category.id }}"{% if category.id in selected_categories %} selected{% endif %}>{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                                </div>
                            {% else %}
                                <div class="component-row flex gap-2 items-center">
                                    <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                        <option value="product"{% if comp.type == 'product' %} selected{% endif %}>Producto</option>
                                        <option value="category"{% if comp.type == 'category' %} selected{% endif %}>Categoría</option>
                                    </select>
                                    <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px;{% if comp.type != 'product' %}display:none{% endif %}">
                                        <option value="">Todas</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}">{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px;{% if comp.type != 'product' %}display:none{% endif %}">
                                        {% for product in products %}
                                            {% if product.id != composed.id %}
                                                <option value="{{ product.id }}" data-category="{{ product.category.id }}"{% if comp.type == 'product' and product.id == comp.object.id %} selected{% endif %}>{{ product.name }}</option>
                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                    <select class="component-category-select border rounded px-2 py-1" style="min-width:160px;{% if comp.type != 'category' %}display:none{% endif %}">
                                        <option value="">Selecciona categoría</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}"{% if comp.type == 'category' and category.id == comp.object.id %} selected{% endif %}>{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                                </div>
                            {% endif %}
                        {% endfor %}
                    {% else %}
                        <div class="component-row flex gap-2 items-center">
                            <select class="component-type-select border rounded px-2 py-1" style="min-width:110px">
                                <option value="product">Producto</option>
                                <option value="category">Categoría</option>
                            </select>
                            <select class="component-category-filter border rounded px-2 py-1" style="min-width:110px">
                                <option value="">Todas</option>
                                {% for category in categories %}
                                    <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                            <select class="component-product-select border rounded px-2 py-1" multiple style="min-width:160px">
                                {% for product in products %}
                                    <option value="{{ product.id }}" data-category="{{ product.category.id }}">{{ product.name }}</option>
                                {% endfor %}
                            </select>
                            <select class="component-category-select border rounded px-2 py-1" style="min-width:160px; display:none">
                                <option value="">Selecciona categoría</option>
                                {% for category in categories %}
                                    <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                            <button type="button" class="remove-component-btn text-red-600 hover:text-red-800 text-xl font-bold px-2" title="Quitar componente">&times;</button>
                        </div>
                    {% endif %}
                </div>
                <button type="button" id="addComponentBtn" class="mt-2 btn secondary flex items-center gap-1"><i data-feather="plus"></i> Añadir componente</button>
            </div>
            <button type="submit" class="btn primary flex items-center gap-2"><i data-feather="save"></i> Guardar cambios</button>
        </form>
    </div>
{% endblock %}
{% block scripts %}
<script src="/assets/js/components/fileUpload.js"></script>
<script>
(function() {
    const componentsContainer = document.getElementById('componentsContainer');
    const addComponentBtn = document.getElementById('addComponentBtn');
    const form = componentsContainer.closest('form');

    function createComponentRow(type = 'product') {
        const template = componentsContainer.querySelector('.component-row');
        const clone = template.cloneNode(true);
        clone.querySelector('.component-type-select').value = type;
        clone.querySelector('.component-category-filter').value = '';
        clone.querySelector('.component-product-select').selectedIndex = -1;
        clone.querySelector('.component-category-select').selectedIndex = 0;
        updateComponentType(clone, type);
        Array.from(clone.querySelectorAll('option[selected]')).forEach(o => o.selected = false);
        return clone;
    }

    function updateComponentType(row, type) {
        const productSelect = row.querySelector('.component-product-select');
        const categorySelect = row.querySelector('.component-category-select');
        const categoryFilter = row.querySelector('.component-category-filter');
        if (type === 'product') {
            productSelect.style.display = '';
            categorySelect.style.display = 'none';
            if (categoryFilter) categoryFilter.style.display = '';
        } else {
            productSelect.style.display = 'none';
            categorySelect.style.display = '';
            if (categoryFilter) categoryFilter.style.display = 'none';
        }
    }

    function filterProductsByCategory(row, categoryId) {
        const productSelect = row.querySelector('.component-product-select');
        Array.from(productSelect.options).forEach(opt => {
            if (!categoryId || opt.dataset.category === categoryId) {
                opt.style.display = '';
            } else {
                opt.style.display = 'none';
                opt.selected = false;
            }
        });
    }

    // Añadir componente
    addComponentBtn.addEventListener('click', function() {
        const newRow = createComponentRow();
        componentsContainer.appendChild(newRow);
        updateRemoveButtons();
    });

    // Delegación de eventos
    componentsContainer.addEventListener('change', function(e) {
        const row = e.target.closest('.component-row');
        if (e.target.classList.contains('component-type-select')) {
            updateComponentType(row, e.target.value);
        }
        if (e.target.classList.contains('component-category-filter')) {
            filterProductsByCategory(row, e.target.value);
        }
    });

    // Eliminar componente
    componentsContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-component-btn')) {
            const row = e.target.closest('.component-row');
            if (componentsContainer.children.length > 2) {
                row.remove();
                updateRemoveButtons();
            } else {
                alert('Debe haber al menos dos componentes.');
            }
        }
    });

    // Ocultar botón eliminar si hay solo dos componentes
    function updateRemoveButtons() {
        const rows = componentsContainer.querySelectorAll('.component-row');
        rows.forEach(row => {
            const btn = row.querySelector('.remove-component-btn');
            if (rows.length <= 2) {
                btn.style.display = 'none';
            } else {
                btn.style.display = '';
            }
        });
    }
    updateRemoveButtons();

    // Precarga: filtra productos por categoría si corresponde
    componentsContainer.querySelectorAll('.component-row').forEach(row => {
        const filter = row.querySelector('.component-category-filter');
        if (filter && filter.value) {
            filterProductsByCategory(row, filter.value);
        }
        // Ajusta visibilidad de selects según tipo
        const type = row.querySelector('.component-type-select').value;
        updateComponentType(row, type);
    });

    // AJAX para el submit del formulario
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        // Contar productos seleccionados (no categorías)
        let totalProducts = 0;
        let components = [];
        let position = 0;
        componentsContainer.querySelectorAll('.component-row').forEach(row => {
            const type = row.querySelector('.component-type-select').value;
            if (type === 'product') {
                const selected = Array.from(row.querySelector('.component-product-select').selectedOptions).map(opt => opt.value);
                totalProducts += selected.length;
                if (selected.length > 0) {
                    components.push({
                        type: 'product',
                        ids: selected,
                        position: position++
                    });
                }
            } else if (type === 'category') {
                const selectedCategory = row.querySelector('.component-category-select').value;
                if (selectedCategory) {
                    components.push({
                        type: 'category',
                        ids: [selectedCategory],
                        position: position++
                    });
                }
            }
        });

        // Validar que haya al menos un producto seleccionado
        if (totalProducts === 0) {
            return alert('Debe seleccionar al menos un producto.');
        }

        // Enviar formulario via AJAX
        fetch(form.action, {
            method: 'POST',
            body: JSON.stringify({
                name: form.name.value,
                components: components
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Redirigir o mostrar mensaje de éxito
                window.location.href = '/admin/composed';
            } else {
                alert('Error al guardar los cambios. Intente nuevamente.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ocurrió un error inesperado. Intente nuevamente.');
        });
    });
})();
</script>
{% endblock %}
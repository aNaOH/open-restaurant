{% extends "/templates/admin.php.twig" %}

{% block title %}Editar producto compuesto{% endblock %}

{% block name %}Editar producto compuesto{% endblock %}
{% block content %}
    <div class="max-w-lg mx-auto bg-white rounded-2xl p-8">
        <form action="/admin/composed/edit/{{ composed.id }}" method="POST" class="flex flex-col gap-4">
            <div>
                <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Nombre</label>
                <input type="text" id="name" name="name" required value="{{ composed.name }}" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <div>
                <label for="components" class="block text-gray-700 text-sm font-bold mb-2">Componentes</label>
                <textarea id="components" name="components" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">{{ composed.components }}</textarea>
            </div>
            <button type="submit" class="btn primary flex items-center gap-2"><i data-feather="save"></i> Guardar cambios</button>
        </form>
    </div>
{% endblock %}
{% block scripts %}
<script src="/assets/js/components/fileUpload.js"></script>
<script>
(function() {
    const componentsContainer = document.getElementById('componentsContainer');
    const addComponentBtn = document.getElementById('addComponentBtn');
    const form = componentsContainer.closest('form');

    function createComponentRow(type = 'product') {
        const template = componentsContainer.querySelector('.component-row');
        const clone = template.cloneNode(true);
        clone.querySelector('.component-type-select').value = type;
        clone.querySelector('.component-category-filter').value = '';
        clone.querySelector('.component-product-select').selectedIndex = -1;
        clone.querySelector('.component-category-select').selectedIndex = 0;
        updateComponentType(clone, type);
        Array.from(clone.querySelectorAll('option[selected]')).forEach(o => o.selected = false);
        return clone;
    }

    function updateComponentType(row, type) {
        const productSelect = row.querySelector('.component-product-select');
        const categorySelect = row.querySelector('.component-category-select');
        const categoryFilter = row.querySelector('.component-category-filter');
        if (type === 'product') {
            productSelect.style.display = '';
            categorySelect.style.display = 'none';
            if (categoryFilter) categoryFilter.style.display = '';
        } else {
            productSelect.style.display = 'none';
            categorySelect.style.display = '';
            if (categoryFilter) categoryFilter.style.display = 'none';
        }
    }

    function filterProductsByCategory(row, categoryId) {
        const productSelect = row.querySelector('.component-product-select');
        Array.from(productSelect.options).forEach(opt => {
            if (!categoryId || opt.dataset.category === categoryId) {
                opt.style.display = '';
            } else {
                opt.style.display = 'none';
                opt.selected = false;
            }
        });
    }

    // Añadir componente
    addComponentBtn.addEventListener('click', function() {
        const newRow = createComponentRow();
        componentsContainer.appendChild(newRow);
        updateRemoveButtons();
    });

    // Delegación de eventos
    componentsContainer.addEventListener('change', function(e) {
        const row = e.target.closest('.component-row');
        if (e.target.classList.contains('component-type-select')) {
            updateComponentType(row, e.target.value);
        }
        if (e.target.classList.contains('component-category-filter')) {
            filterProductsByCategory(row, e.target.value);
        }
    });

    // Eliminar componente
    componentsContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-component-btn')) {
            const row = e.target.closest('.component-row');
            if (componentsContainer.children.length > 2) {
                row.remove();
                updateRemoveButtons();
            } else {
                alert('Debe haber al menos dos componentes.');
            }
        }
    });

    // Ocultar botón eliminar si hay solo dos componentes
    function updateRemoveButtons() {
        const rows = componentsContainer.querySelectorAll('.component-row');
        rows.forEach(row => {
            const btn = row.querySelector('.remove-component-btn');
            if (rows.length <= 2) {
                btn.style.display = 'none';
            } else {
                btn.style.display = '';
            }
        });
    }
    updateRemoveButtons();

    // Precarga: filtra productos por categoría si corresponde
    componentsContainer.querySelectorAll('.component-row').forEach(row => {
        const filter = row.querySelector('.component-category-filter');
        if (filter && filter.value) {
            filterProductsByCategory(row, filter.value);
        }
        // Ajusta visibilidad de selects según tipo
        const type = row.querySelector('.component-type-select').value;
        updateComponentType(row, type);
    });

    // AJAX para el submit del formulario
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        // Contar componentes seleccionados
        let total = 0;
        let components = [];
        let position = 0;
        componentsContainer.querySelectorAll('.component-row').forEach(row => {
            const type = row.querySelector('.component-type-select').value;
            if (type === 'product') {
                const selected = Array.from(row.querySelector('.component-product-select').selectedOptions).map(opt => opt.value);
                total += selected.length;
                if (selected.length > 0) {
                    components.push({type: 'product', ids: selected, position: position});
                }
            } else {
                const catId = row.querySelector('.component-category-select').value;
                if (catId) {
                    total += 1;
                    components.push({type: 'category', ids: [catId], position: position});
                }
            }
            position++;
        });
        if (total < 2) {
            alert('Debes seleccionar al menos dos componentes en total.');
            return;
        }
        // Validación básica de campos
        if (!document.getElementById('name').value) {
            alert('Por favor ingresa el nombre del producto compuesto.');
            return;
        }
        if (!document.getElementById('description').value) {
            alert('Por favor ingresa la descripción.');
            return;
        }
        if (!document.getElementById('price').value) {
            alert('Por favor ingresa el precio.');
            return;
        }
        // Construir FormData
        const formData = new FormData();
        formData.append('name', document.getElementById('name').value);
        formData.append('category', document.getElementById('category').value);
        formData.append('description', document.getElementById('description').value);
        formData.append('price', document.getElementById('price').value);
        // Componentes serializados
        formData.append('components', JSON.stringify(components));
        // Imagen (si hay nueva)
        const fileInput = document.getElementById('imgUpload').getFileInput && document.getElementById('imgUpload').getFileInput();
        if (fileInput && fileInput[0]) {
            formData.append('image', fileInput[0]);
        }
        // AJAX
        fetch(form.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                window.location.href = '/admin/composed'; // Descomenta si quieres redirigir
            } else {
                alert('Error: ' + (data.message || 'Error desconocido.'));
            }
        })
        .catch(err => {
            alert('Error al guardar los cambios: ' + (err.message || ''));
        });
    });
})();
</script>
{% endblock %}
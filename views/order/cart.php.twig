{% extends "/templates/base.php.twig" %}

{% block title %}Carro de la mesa {{order.table}}{% endblock %}

{% block content %}
    {% include "/components/header.php.twig" %}
    <div class="max-w-2xl mx-auto mt-8 w-full">
        <h1 class="text-2xl font-bold text-gray-800 mb-4">Carrito de la mesa {{ order.table }}</h1>
        {% if order.items|length == 0 %}
            <div class="bg-yellow-50 border border-yellow-200 text-yellow-700 rounded-lg p-4 text-center mb-6">
                El carrito está vacío.
            </div>
        {% else %}
            <div class="bg-white rounded-xl shadow p-4 mb-6 border border-blue-100">
                <ul class="divide-y divide-blue-50">
                    {% for item in order.items %}
                        <li class="py-4 flex flex-col md:flex-row md:items-center gap-2 md:gap-6">
                            <div class="flex-shrink-0">
                                {% if item.product_snapshot.image is defined and item.product_snapshot.image %}
                                    <img src="/{{ item.product_snapshot.image }}" alt="{{ item.product_snapshot.name }}" class="w-16 h-16 object-cover rounded-xl border border-blue-100 bg-gray-50">
                                {% else %}
                                    <div class="w-16 h-16 rounded-xl bg-gray-100 flex items-center justify-center text-gray-400">Sin imagen</div>
                                {% endif %}
                            </div>
                            <div class="flex-1">
                                <div class="flex items-center gap-2">
                                    <span class="font-semibold text-lg text-gray-800">{{ item.product_snapshot.name }}</span>
                                    <span class="text-primary font-bold text-base">x{{ item.quantity }}</span>
                                    {% if item.product_snapshot.price is defined %}
                                        <span class="ml-2 text-blue-600 font-bold text-base">
                                            {% if item.product_snapshot.price == 0 %}Gratis{% else %}${{ (item.product_snapshot.price * item.quantity)|number_format(2, '.', ',') }}{% endif %}
                                        </span>
                                    {% endif %}
                                    {% if item.metadata.promo is defined %}
                                        <span class="ml-2 px-2 py-1 rounded bg-yellow-100 text-yellow-800 text-xs font-bold">Promo</span>
                                    {% endif %}
                                </div>
                                <div class="text-gray-500 text-sm">Cantidad: {{ item.quantity }}</div>
                                {% if item.metadata.components is defined and item.metadata.components|length > 0 %}
                                    <div class="text-gray-600 text-sm mt-1">
                                        <span class="font-semibold">Componentes:</span>
                                        <ul class="list-disc ml-5">
                                            {% for comp in item.metadata.components %}
                                                <li>{{ comp.name }}</li>
                                            {% endfor %}
                                        </ul>
                                    </div>
                                {% endif %}
                                {% if item.metadata.notes is defined and item.metadata.notes %}
                                    <div class="text-gray-500 text-xs mt-1 italic">Notas: {{ item.metadata.notes }}</div>
                                {% endif %}
                            </div>
                            <button type="button"
                                class="text-red-600 hover:text-red-800 font-semibold flex items-center gap-1 px-3 py-1 rounded-full bg-red-50 border border-red-100"
                                data-product-id="{{ item.product_id }}"
                                data-metadata='{{ item.metadata|json_encode|e('html_attr') }}'
                                onclick="removeCartItemFromBtn(this)">
                                <i data-feather="trash-2" class="w-4 h-4"></i> Quitar
                            </button>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        {% if order.promos is defined and order.promos|length > 0 %}
            <div class="mb-6">
                <h2 class="font-bold text-blue-700 mb-2">Promociones aplicadas</h2>
                <div class="flex flex-wrap gap-4">
                    {% for code, promo in order.promos %}
                        <div class="flex items-center gap-2 bg-blue-50 border border-blue-100 rounded-lg px-3 py-2">
                            <img src="/{{ promo.image }}" alt="{{ promo.name }}" class="w-10 h-10 object-cover rounded">
                            <span class="font-semibold text-blue-800">{{ promo.name }}</span>
                            <form method="post" action="/order/cancel-promo" onsubmit="return removePromo(event, '{{ code }}')">
                                <button type="submit" class="ml-2 text-red-600 hover:text-red-800 font-semibold flex items-center gap-1 px-2 py-1 rounded-full bg-red-50 border border-red-100">
                                    <i data-feather="x" class="w-4 h-4"></i> Quitar
                                </button>
                            </form>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}

        {# Calcular el total igual que en el carrito flotante #}
        {% set total_dinero = order.items|map(i => (i.product_snapshot.price is defined ? i.product_snapshot.price : 0) * i.quantity)|reduce((a, b) => a + b) %}
        <div class="flex justify-between items-center mt-8 mb-4">
            <span class="text-xl font-bold text-gray-800">Total:</span>
            <span class="text-2xl font-extrabold text-blue-700">
                ${{ total_dinero|number_format(2, '.', ',') }}
            </span>
        </div>
        <div class="flex gap-4 mt-6" id="cart-actions">
            <a href="/order" class="px-5 py-2 rounded-full font-semibold text-blue-600 bg-blue-50 hover:bg-blue-100 border border-blue-100 transition-all" id="continue-btn">Seguir pidiendo</a>
        </div>

        <div class="mt-10">
            <h2 class="text-xl font-bold text-gray-800 mb-4">Pagar con tarjeta</h2>
            {% if user is defined and user %}
                <div class="mb-4 flex flex-col gap-1" id="checkout-user-info">
                    <div class="text-gray-700 text-sm">Comprador: <span class="font-semibold">{{ user.email }}</span></div>
                    <div class="text-green-700 text-sm">Vas a ganar <span class="font-bold">{{ (total_dinero * (points_per_unit|default(100)))|round(0, 'floor') }}</span> puntos</div>
                </div>
            {% else %}
                <div class="mb-4" id="checkout-email-group">
                    <label for="checkout-email" class="block text-gray-700 text-sm font-bold mb-2">Correo electrónico para el recibo</label>
                    <input type="email" id="checkout-email" name="checkout_email" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline transition-all duration-200" placeholder="tucorreo@ejemplo.com">
                </div>
            {% endif %}
            <div id="checkout-messages" class="mb-4"></div>
            <form id="payment-form" class="bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col gap-4">
                <label class="font-semibold text-gray-700">Datos de la tarjeta</label>
                <div id="card-element" class="border border-blue-200 rounded-lg px-4 py-3 bg-gray-50"></div>
                <button id="pay-btn" type="submit" class="mt-4 px-5 py-2 rounded-full font-semibold text-white bg-green-600 hover:bg-green-700 transition-all flex items-center justify-center gap-2">
                    <span id="pay-btn-text">Pagar pedido</span>
                    <span id="pay-btn-spinner" class="hidden animate-spin"><svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path></svg></span>
                </button>
            </form>
            <div id="payment-success" class="hidden mt-6 p-4 bg-green-50 border border-green-200 text-green-800 rounded-lg text-center font-semibold flex flex-col items-center gap-4">
                <span>¡Pago realizado con éxito!</span>
                <button id="download-receipt" class="px-4 py-2 rounded-full font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all flex items-center gap-2"><i data-feather="download" class="w-4 h-4"></i> Descargar recibo PDF</button>
            </div>
        </div>
    </div>

    <dialog id="deleteModal" class="rounded-2xl shadow-2xl max-w-sm w-full border-0 bg-transparent backdrop-blur-sm">
        <form id="deleteModalForm" method="dialog" class="relative bg-white p-8 rounded-2xl shadow-xl border border-blue-100 flex flex-col items-center">
            <button id="closeDeleteModalBtn" type="button" class="mb-2 self-end text-gray-400 hover:text-blue-500 bg-white border border-gray-200 rounded-full w-9 h-9 flex items-center justify-center shadow transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-300" aria-label="Cerrar modal">
                <i data-feather="x" class="w-5 h-5"></i>
            </button>
            <div class="flex flex-col items-center">
                <span class="flex items-center justify-center bg-yellow-100 rounded-full p-3 mb-3">
                    <i data-feather="alert-triangle" class="w-7 h-7 text-yellow-500"></i>
                </span>
                <h3 class="text-xl font-bold text-center mb-2 text-gray-800" id="deleteModalTitle">¿Quitar del carrito?</h3>
                <p class="mb-6 text-gray-600 text-center" id="deleteModalText">¿Estás seguro de que deseas quitar este producto?</p>
                <div class="flex gap-3 mt-2">
                    <button id="deleteModalCancel" type="button" class="px-5 py-2 rounded-full font-semibold text-gray-600 bg-gray-100 hover:bg-gray-200 transition-all duration-200 flex items-center gap-2">
                        <i data-feather="arrow-left" class="w-4 h-4"></i> No, volver
                    </button>
                    <button id="deleteModalConfirm" type="button" class="px-5 py-2 rounded-full font-semibold text-white bg-red-500 hover:bg-red-600 transition-all duration-200 flex items-center gap-2">
                        <i data-feather="trash-2" class="w-4 h-4"></i> Sí, quitar
                    </button>
                </div>
            </div>
        </form>
    </dialog>
    <style>
    dialog[open] {
        display: flex !important;
        align-items: center;
        justify-content: center;
        background: rgba(0,0,0,0.35);
        position: fixed;
        inset: 0;
        z-index: 50;
        padding: 0;
        width: 100vw;
        height: 100vh;
        max-width: 100vw;
        max-height: 100vh;
        margin: 0;
        backdrop-filter: blur(4px);
    }
    </style>
    <script>
        let deleteAction = null;
        let deleteArgs = null;
        function showDeleteModal(type, args) {
            deleteAction = type;
            deleteArgs = args;
            const modal = document.getElementById('deleteModal');
            const title = document.getElementById('deleteModalTitle');
            const text = document.getElementById('deleteModalText');
            if(type === 'item') {
                title.textContent = '¿Quitar del carrito?';
                text.textContent = '¿Estás seguro de que deseas quitar este producto del carrito?';
            } else if(type === 'promo') {
                title.textContent = '¿Quitar promoción?';
                text.textContent = '¿Estás seguro de que deseas quitar esta promoción?';
            }
            modal.showModal();
            if(window.feather) feather.replace();
        }
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('deleteModal');
            document.getElementById('deleteModalCancel').onclick = function() {
                modal.close();
                deleteAction = null;
                deleteArgs = null;
            };
            document.getElementById('closeDeleteModalBtn').onclick = function() {
                modal.close();
                deleteAction = null;
                deleteArgs = null;
            };
            document.getElementById('deleteModalConfirm').onclick = function() {
                if(deleteAction === 'item' && deleteArgs) {
                    fetch('/order/remove', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
                        body: JSON.stringify({ product_id: deleteArgs.productId, metadata: deleteArgs.metadata })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if(data && data.status === 'ok') {
                            window.location.reload();
                        } else {
                            alert(data && data.message ? data.message : 'No se pudo quitar el producto.');
                        }
                    })
                    .catch(() => alert('Error de red.'));
                } else if(deleteAction === 'promo' && deleteArgs) {
                    fetch('/order/cancel-promo', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
                        body: JSON.stringify({ code: deleteArgs.code })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if(data && data.status === 'ok') {
                            window.location.reload();
                        } else {
                            alert(data && data.message ? data.message : 'No se pudo quitar la promoción.');
                        }
                    })
                    .catch(() => alert('Error de red.'));
                }
                modal.close();
                deleteAction = null;
                deleteArgs = null;
            };
            // Cierra el modal si se hace click fuera del contenido
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.close();
                    deleteAction = null;
                    deleteArgs = null;
                }
            });
            modal.addEventListener('close', function() {
                // Limpia clases de animación si las hubiera
            });
        });
        function removeCartItem(event, productId, metadata) {
            if (event) event.stopPropagation();
            showDeleteModal('item', { productId, metadata });
            return false;
        }
        function removePromo(event, code) {
            if (event) event.preventDefault();
            showDeleteModal('promo', { code });
            return false;
        }
        function removeCartItemFromBtn(btn) {
            const productId = btn.getAttribute('data-product-id');
            let metadata = btn.getAttribute('data-metadata');
            try { metadata = JSON.parse(metadata); } catch(e) { metadata = {}; }
            showDeleteModal('item', { productId, metadata });
        }
    </script>
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
    let stripe, elements, card;
    document.addEventListener('DOMContentLoaded', async function() {
        stripe = Stripe('{{ stripe_public_key|e('js') }}');
        elements = stripe.elements();
        card = elements.create('card', { style: { base: { fontSize: '16px', color: '#1e293b' } } });
        card.mount('#card-element');

        const form = document.getElementById('payment-form');
        const payBtn = document.getElementById('pay-btn');
        const payBtnText = document.getElementById('pay-btn-text');
        const payBtnSpinner = document.getElementById('pay-btn-spinner');
        const emailInput = document.getElementById('checkout-email');
        const emailGroup = document.getElementById('checkout-email-group');
        const userInfo = document.getElementById('checkout-user-info');
        const paymentSuccess = document.getElementById('payment-success');
        const downloadReceiptBtn = document.getElementById('download-receipt');

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            payBtn.disabled = true;
            payBtnText.classList.add('hidden');
            payBtnSpinner.classList.remove('hidden');
            if (emailInput) emailInput.disabled = true;
            document.getElementById('checkout-messages').textContent = '';
            let clientSecret;
            let email = '';
            {% if user is not defined or not user %}
                email = emailInput.value;
            {% else %}
                email = '{{ user.email|e('js') }}';
            {% endif %}
            try {
                const res = await fetch('/order/create-stripe', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
                const data = await res.json();
                clientSecret = data.client_secret;
            } catch (err) {
                document.getElementById('checkout-messages').textContent = 'Error al iniciar el pago.';
                payBtn.disabled = false;
                payBtnText.classList.remove('hidden');
                payBtnSpinner.classList.add('hidden');
                if (emailInput) emailInput.disabled = false;
                return;
            }
            const {error, paymentIntent} = await stripe.confirmCardPayment(clientSecret, {
                payment_method: { card: card, billing_details: { email: email } }
            });
            if (error) {
                document.getElementById('checkout-messages').textContent = error.message;
                payBtn.disabled = false;
                payBtnText.classList.remove('hidden');
                payBtnSpinner.classList.add('hidden');
                if (emailInput) emailInput.disabled = false;
            } else if (paymentIntent && paymentIntent.status === 'succeeded') {
                document.getElementById('payment-success').classList.remove('hidden');
                form.style.display = 'none';
                if (emailGroup) emailGroup.style.display = 'none';
                if (userInfo) userInfo.style.display = 'none';
                // Cambia el botón de seguir pidiendo por volver al inicio
                const cartActions = document.getElementById('cart-actions');
                if (cartActions) {
                    cartActions.innerHTML = '<a href="/" class="px-5 py-2 rounded-full font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all">Volver al inicio</a>';
                }
                // Guardar pedido en la base de datos
                fetch('/order/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        order: {{ order|json_encode|raw }},
                        email: email,
                        stripe_id: paymentIntent.id,
                        total: {{ total_dinero|number_format(2, '.', ',') }}
                    })
                });
                // Descargar recibo PDF
                if (downloadReceiptBtn) {
                    downloadReceiptBtn.onclick = function() {
                        const doc = new window.jspdf.jsPDF();
                        doc.setFontSize(18);
                        doc.text('Recibo de compra', 20, 20);
                        doc.setFontSize(12);
                        doc.text('Fecha: ' + new Date().toLocaleString(), 20, 35);
                        doc.text('Correo: ' + email, 20, 45);
                        let y = 60;
                        doc.setFontSize(14);
                        doc.text('Productos:', 20, y);
                        y += 8;
                        doc.setFontSize(12);
                        {% for item in order.items %}
                            doc.text('- {{ item.product_snapshot.name|e('js') }} x{{ item.quantity }}: ${{ (item.product_snapshot.price * item.quantity)|number_format(2, '.', ',') }}', 25, y);
                            y += 7;
                        {% endfor %}
                        y += 3;
                        doc.setFontSize(12);
                        doc.text('Total pagado: ${{ total_dinero|number_format(2, '.', ',') }} EUR', 20, y);
                        y += 10;
                        doc.text('ID de pago: ' + paymentIntent.id, 20, y);
                        y += 10;
                        doc.text('¡Gracias por tu compra!', 20, y);
                        doc.save('recibo_openrestaurant.pdf');
                    };
                }
                // Borrar pedido
                fetch('/order/stop');
            }
        });
    });
    </script>
{% endblock %}
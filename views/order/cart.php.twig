{% extends "/templates/base.php.twig" %}

{% block title %}Carro de la mesa {{order.table}}{% endblock %}

{% block content %}
    {% include "/components/header.php.twig" %}
    <div class="max-w-2xl mx-auto mt-8 w-full">
        <h1 class="text-2xl font-bold text-gray-800 mb-4">Carrito de la mesa {{ order.table }}</h1>
        {% if order.items|length == 0 %}
            <div class="bg-yellow-50 border border-yellow-200 text-yellow-700 rounded-lg p-4 text-center mb-6">
                El carrito está vacío.
            </div>
        {% else %}
            <div class="bg-white rounded-xl shadow p-4 mb-6 border border-blue-100">
                <ul class="divide-y divide-blue-50">
                    {% for item in order.items %}
                        <li class="py-4 flex flex-col md:flex-row md:items-center gap-2 md:gap-6">
                            <div class="flex-shrink-0">
                                {% if item.product_snapshot.image is defined and item.product_snapshot.image %}
                                    <img src="/{{ item.product_snapshot.image }}" alt="{{ item.product_snapshot.name }}" class="w-16 h-16 object-cover rounded-xl border border-blue-100 bg-gray-50">
                                {% else %}
                                    <div class="w-16 h-16 rounded-xl bg-gray-100 flex items-center justify-center text-gray-400">Sin imagen</div>
                                {% endif %}
                            </div>
                            <div class="flex-1">
                                <div class="flex items-center gap-2">
                                    <span class="font-semibold text-lg text-gray-800">{{ item.product_snapshot.name }}</span>
                                    <span class="text-primary font-bold text-base">x{{ item.quantity }}</span>
                                    {% if item.product_snapshot.points is defined and item.product_snapshot.points > 0 %}
                                        <span class="ml-2 text-yellow-700 font-bold text-base flex items-center gap-1">
                                            <i data-feather="star" class="w-5 h-5 text-yellow-500"></i>
                                            {{ (item.product_snapshot.points * item.quantity)|number_format(0, '.', ',') }} pts
                                        </span>
                                    {% elseif item.product_snapshot.price is defined %}
                                        <span class="ml-2 text-blue-600 font-bold text-base">
                                            {% if item.product_snapshot.price == 0 %}Gratis{% else %}{{ (item.product_snapshot.price * item.quantity)|number_format(2, '.', ',') }} €{% endif %}
                                        </span>
                                    {% endif %}
                                    {% if item.metadata.promo is defined %}
                                        <span class="ml-2 px-2 py-1 rounded bg-yellow-100 text-yellow-800 text-xs font-bold">Promo</span>
                                    {% endif %}
                                </div>
                                <div class="text-gray-500 text-sm">Cantidad: {{ item.quantity }}</div>
                                {% if item.metadata.components is defined and item.metadata.components|length > 1 %}
                                    <div class="text-gray-600 text-sm mt-1 overflow-x-auto max-w-[220px]">
                                        <span class="font-semibold">Componentes:</span>
                                        <ul class="list-disc ml-5 flex flex-col gap-2">
                                            {% for comp in item.metadata.components %}
                                                <li class="whitespace-nowrap">{{ comp.name }}</li>
                                            {% endfor %}
                                        </ul>
                                    </div>
                                {% endif %}
                                {% if item.metadata.notes is defined and item.metadata.notes %}
                                    <div class="text-gray-500 text-xs mt-1 italic">Notas: {{ item.metadata.notes }}</div>
                                {% endif %}
                            </div>
                            <button type="button"
                                class="text-red-600 hover:text-red-800 font-semibold flex items-center gap-1 px-3 py-1 rounded-full bg-red-50 border border-red-100"
                                data-product-id="{{ item.product_id }}"
                                data-metadata='{{ item.metadata|json_encode|e('html_attr') }}'
                                onclick="removeCartItemFromBtn(this)">
                                <i data-feather="trash-2" class="w-4 h-4"></i> Quitar
                            </button>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

        {% if order.promos is defined and order.promos|length > 0 %}
            <div class="mb-6">
                <h2 class="font-bold text-blue-700 mb-2">Promociones aplicadas</h2>
                <div class="flex flex-wrap gap-4">
                    {% for code, promo in order.promos %}
                        <div class="flex items-center gap-2 bg-blue-50 border border-blue-100 rounded-lg px-3 py-2">
                            <img src="/{{ promo.image }}" alt="{{ promo.name }}" class="w-10 h-10 object-cover rounded">
                            <span class="font-semibold text-blue-800">{{ promo.name }}</span>
                            <form method="post" action="/order/cancel-promo" onsubmit="return removePromo(event, '{{ code }}')">
                                <button type="submit" class="ml-2 text-red-600 hover:text-red-800 font-semibold flex items-center gap-1 px-2 py-1 rounded-full bg-red-50 border border-red-100">
                                    <i data-feather="x" class="w-4 h-4"></i> Quitar
                                </button>
                            </form>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}

        <div class="flex justify-between items-center mt-8 mb-4">
            <span class="text-xl font-bold text-gray-800">Total:</span>
            <span class="text-2xl font-extrabold text-blue-700">
                {% if total_dinero == 0 and total_puntos > 0 %}
                    <i data-feather="star" class="w-6 h-6 text-yellow-500"></i> {{ total_puntos|number_format(0, '.', ',') }} pts
                {% elseif total_dinero == 0 and total_puntos == 0 %}
                    Gratis
                {% else %}
                    {{ total_dinero|number_format(2, '.', ',') }} €
                {% endif %}
            </span>
            {% if total_puntos > 0 and not (total_dinero == 0) %}
            <span class="text-xl font-extrabold text-purple-700 flex items-center gap-1"><i data-feather="star" class="w-5 h-5 text-yellow-500"></i> {{ total_puntos|number_format(0, '.', ',') }} pts</span>
            {% endif %}
        </div>

        <div class="flex gap-4 mt-6" id="cart-actions">
            <a href="/order" class="px-5 py-2 rounded-full font-semibold text-blue-600 bg-blue-50 hover:bg-blue-100 border border-blue-100 transition-all" id="continue-btn">Seguir pidiendo</a>
        </div>

        <div class="mt-10">
            <h2 class="text-xl font-bold text-gray-800 mb-4">Pagar con tarjeta</h2>
            {% if user is not defined or not user %}
                <form id="payment-form" class="bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col gap-4">
                    <div id="checkout-user-info" class="flex flex-col gap-2 mb-2">
                        <label for="checkout-email" class="font-semibold text-gray-700">Correo electrónico</label>
                        <input id="checkout-email" name="email" type="email" required placeholder="Tu correo electrónico" class="border border-blue-200 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400">
                        <div id="fidelity-hint" class="text-xs text-blue-700 mt-1 hidden"></div>
                        <div id="login-hint" class="text-xs text-green-700 mt-1 hidden"></div>
                    </div>
                    <div id="card-element" class="mb-4 hidden"></div>
                    <button id="pay-btn" type="button" class="w-full px-5 py-2 rounded-full font-semibold text-white bg-green-600 hover:bg-green-700 transition-all flex items-center justify-center gap-2">
                        <span id="pay-btn-text">Finalizar pedido</span>
                        <span id="pay-btn-spinner" class="hidden animate-spin"><i data-feather="loader" class="w-5 h-5"></i></span>
                    </button>
                </form>
            {% else %}
                <form id="payment-form" class="bg-white rounded-xl shadow p-6 border border-blue-100 flex flex-col gap-4">
                    <div id="checkout-user-info" class="flex flex-col gap-2 mb-2">
                        <div class="font-semibold text-gray-700">Correo: <span class="text-blue-700">{{ user.email }}</span></div>
                        {% if total_dinero > 0 and points_per_unit is defined %}
                            <div class="text-xs text-blue-700 mt-1">Vas a ganar <span class="font-bold">{{ (total_dinero * points_per_unit)|number_format(0, '.', ',') }}</span> puntos de fidelidad con esta compra.</div>
                        {% endif %}
                    </div>
                    {% if show_stripe %}
                        <div id="card-element" class="mb-4"></div>
                    {% endif %}
                    <button id="pay-btn" type="button" class="w-full px-5 py-2 rounded-full font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all flex items-center justify-center gap-2">
                        <span id="pay-btn-text">Pagar</span>
                        <span id="pay-btn-spinner" class="hidden animate-spin"><i data-feather="loader" class="w-5 h-5"></i></span>
                    </button>
                </form>
            {% endif %}
            <div id="payment-success" class="hidden mt-6 p-4 bg-green-50 border border-green-200 text-green-800 rounded-lg font-semibold flex flex-col items-center gap-4">
                <span>¡Pago realizado con éxito!</span>
                <button id="download-receipt" class="px-4 py-2 rounded-full font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all flex items-center gap-2" style="margin-left:auto;margin-right:auto;"> <i data-feather="download" class="w-4 h-4"></i> Descargar recibo PDF</button>
            </div>
        </div>
    </div>

    <dialog id="deleteModal" class="rounded-2xl shadow-2xl max-w-sm w-full border-0 bg-transparent backdrop-blur-sm">
        <form id="deleteModalForm" method="dialog" class="relative bg-white p-8 rounded-2xl shadow-xl border border-blue-100 flex flex-col items-center">
            <button id="closeDeleteModalBtn" type="button" class="mb-2 self-end text-gray-400 hover:text-blue-500 bg-white border border-gray-200 rounded-full w-9 h-9 flex items-center justify-center shadow transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-300" aria-label="Cerrar modal">
                <i data-feather="x" class="w-5 h-5"></i>
            </button>
            <div class="flex flex-col items-center">
                <span class="flex items-center justify-center bg-yellow-100 rounded-full p-3 mb-3">
                    <i data-feather="alert-triangle" class="w-7 h-7 text-yellow-500"></i>
                </span>
                <h3 class="text-xl font-bold text-center mb-2 text-gray-800" id="deleteModalTitle">¿Quitar del carrito?</h3>
                <p class="mb-6 text-gray-600 text-center" id="deleteModalText">¿Estás seguro de que deseas quitar este producto?</p>
                <div class="flex gap-3 mt-2">
                    <button id="deleteModalCancel" type="button" class="px-5 py-2 rounded-full font-semibold text-gray-600 bg-gray-100 hover:bg-gray-200 transition-all duration-200 flex items-center gap-2">
                        <i data-feather="arrow-left" class="w-4 h-4"></i> No, volver
                    </button>
                    <button id="deleteModalConfirm" type="button" class="px-5 py-2 rounded-full font-semibold text-white bg-red-500 hover:bg-red-600 transition-all duration-200 flex items-center gap-2">
                        <i data-feather="trash-2" class="w-4 h-4"></i> Sí, quitar
                    </button>
                </div>
            </div>
        </form>
    </dialog>
    <style>
    dialog[open] {
        display: flex !important;
        align-items: center;
        justify-content: center;
        background: rgba(0,0,0,0.35);
        position: fixed;
        inset: 0;
        z-index: 50;
        padding: 0;
        width: 100vw;
        height: 100vh;
        max-width: 100vw;
        max-height: 100vh;
        margin: 0;
        backdrop-filter: blur(4px);
    }
    </style>
{% endblock %}

{% block scripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
// Utilidades para feedback y botones
function setPayBtnState(disabled, showSpinner = false) {
    const payBtn = document.getElementById('pay-btn');
    const payBtnText = document.getElementById('pay-btn-text') || document.getElementById('payBtnText');
    const payBtnSpinner = document.getElementById('pay-btn-spinner') || document.getElementById('payBtnSpinner');
    if (payBtn) payBtn.disabled = !!disabled;
    if (payBtnText) payBtnText.classList.toggle('hidden', !!showSpinner);
    if (payBtnSpinner) payBtnSpinner.classList.toggle('hidden', !showSpinner);
}
function showCheckoutMessage(msg, type = 'error') {
    let el = document.getElementById('checkout-messages');
    if (!el) {
        el = document.createElement('div');
        el.id = 'checkout-messages';
        el.className = 'mt-3 text-center text-sm';
        const form = document.getElementById('payment-form');
        if (form) form.appendChild(el);
    }
    el.textContent = msg;
    el.className = 'mt-3 text-center text-sm ' + (type === 'error' ? 'text-red-600' : 'text-green-700');
}
function hideCheckoutMessage() {
    const el = document.getElementById('checkout-messages');
    if (el) el.textContent = '';
}
function showPaymentSuccessUI(email) {
    const paymentSuccess = document.getElementById('payment-success');
    const form = document.getElementById('payment-form');
    const emailGroup = document.getElementById('checkout-email-group');
    const userInfo = document.getElementById('checkout-user-info');
    if (paymentSuccess) paymentSuccess.classList.remove('hidden');
    if (form) form.style.display = 'none';
    if (emailGroup) emailGroup.style.display = 'none';
    if (userInfo) userInfo.style.display = 'none';
    const cartActions = document.getElementById('cart-actions');
    if (cartActions) {
        cartActions.innerHTML = '<a href="/" class="px-5 py-2 rounded-full font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all">Volver al inicio</a>';
    }
    // Asegura que el botón de recibo siempre funcione
    const downloadReceiptBtn = document.getElementById('download-receipt');
    if (downloadReceiptBtn) {
        downloadReceiptBtn.onclick = function() {
            const doc = new window.jspdf.jsPDF();
            // Colores y fuente para simular el estilo de la web
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(30, 58, 138); // azul oscuro
            doc.setFontSize(20);
            doc.text('Recibo de compra', 20, 20);
            doc.setFont('helvetica', 'normal');
            doc.setTextColor(55, 65, 81); // gris oscuro
            doc.setFontSize(12);
            doc.text('Fecha: ' + new Date().toLocaleString(), 20, 35);
            doc.text('Correo: ' + (email || ''), 20, 45);
            let y = 60;
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(14);
            doc.setTextColor(30, 64, 175); // azul
            doc.text('Productos:', 20, y);
            y += 8;
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(12);
            doc.setTextColor(30, 41, 59); // gris
            {% for item in order.items %}
                doc.text('- {{ item.product_snapshot.name|e('js') }} x{{ item.quantity }}: ' + (({{ (item.product_snapshot.price * item.quantity)|number_format(2, '.', ',') }}) + ' €'), 25, y);
                y += 7;
                {% if item.metadata.components is defined and item.metadata.components|length > 1 %}
                    doc.setFont('helvetica', 'italic');
                    doc.setFontSize(11);
                    doc.setTextColor(202, 138, 4); // amarillo
                    doc.text('  Componentes:', 28, y);
                    y += 6;
                    {% for comp in item.metadata.components %}
                        doc.setFont('helvetica', 'normal');
                        doc.setTextColor(55, 65, 81); // gris
                        doc.text('    - {{ comp.name|e('js') }}', 32, y);
                        y += 5;
                    {% endfor %}
                    doc.setFont('helvetica', 'normal');
                    doc.setFontSize(12);
                    doc.setTextColor(30, 41, 59);
                {% endif %}
                {% if item.metadata.notes is defined and item.metadata.notes %}
                    doc.setFont('helvetica', 'italic');
                    doc.setFontSize(11);
                    doc.setTextColor(16, 185, 129); // verde
                    doc.text('  Notas: {{ item.metadata.notes|e('js') }}', 28, y);
                    y += 6;
                    doc.setFont('helvetica', 'normal');
                    doc.setFontSize(12);
                    doc.setTextColor(30, 41, 59);
                {% endif %}
            {% endfor %}
            y += 3;
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(13);
            doc.setTextColor(37, 99, 235); // azul fuerte
            doc.text('Total pagado: {{ total_dinero|number_format(2, '.', ',') }} EUR', 20, y);
            y += 10;
            // Mostrar puntos obtenidos si hay puntos
            var puntos = {{ total_puntos|default(0) }};
            if (puntos > 0) {
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(12);
                doc.setTextColor(202, 138, 4); // amarillo (como los puntos en la web)
                doc.text('Puntos obtenidos: ' + puntos.toLocaleString('es-ES'), 20, y);
                y += 8;
            }
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(12);
            doc.setTextColor(99, 102, 241); // azul violeta
            doc.text('ID de pedido: ' + (window._lastOrderId || ''), 20, y);
            y += 8;
            if (typeof {{ order.table|json_encode|raw }} !== 'undefined') {
                doc.text('Mesa: {{ order.table }}', 20, y);
                y += 8;
            }
            y += 10;
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(13);
            doc.setTextColor(21, 128, 61); // verde
            doc.text('¡Gracias por tu compra!', 20, y);
            doc.save('recibo_openrestaurant.pdf');
        };
    }
}

// Lógica principal de pago
function setupPaymentLogic() {
    const form = document.getElementById('payment-form');
    const payBtn = document.getElementById('pay-btn');
    const emailInput = document.getElementById('checkout-email');
    // Solo inicializar Stripe si existe el elemento card-element
    const cardElement = document.getElementById('card-element');
    let stripe, elements, card;
    if (cardElement) {
        stripe = Stripe('{{ stripe_public_key|e('js') }}');
        elements = stripe.elements();
        card = elements.create('card', { style: { base: { fontSize: '16px', color: '#1e293b' } } });
        card.mount('#card-element');
    }
    if (payBtn) {
        payBtn.addEventListener('click', async function handler() {
            setPayBtnState(true, true);
            hideCheckoutMessage();
            let email = '';
            let userId = null;
            {% if user is not defined or not user %}
                email = emailInput ? emailInput.value : '';
            {% else %}
                email = '{{ user.email|e('js') }}';
                userId = {{ user.id|default('null') }};
            {% endif %}
            // Validación de puntos
            {% if user is defined and user and total_puntos > 0 %}
            if ({{ user.points|default(0) }} < {{ total_puntos|default(0) }}) {
                showCheckoutMessage('No tienes suficientes puntos para este pedido.');
                setPayBtnState(false, false);
                if (emailInput) emailInput.disabled = false;
                return;
            }
            {% endif %}
            // Si el total es 0, guardar pedido directamente
            if ({{ total_dinero|json_encode|raw }} == 0) {
                fetch('/order/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        order: {{ order|json_encode|raw }},
                        email: email,
                        stripe_id: null,
                        user_id: userId,
                        total_points: {{ total_puntos|json_encode|raw }}
                    })
                }).then(async res => {
                    if (!res.ok) {
                        const data = await res.json().catch(() => ({}));
                        showCheckoutMessage(data.error || 'Error al guardar el pedido.');
                        setPayBtnState(false, false);
                        if (emailInput) emailInput.disabled = false;
                        return;
                    }
                    const data = await res.json().catch(() => ({}));
                    if (data && data.order_id) window._lastOrderId = data.order_id;
                    showPaymentSuccessUI(email);
                    fetch('/order/stop');
                });
                return;
            }
            // Si hay pago con dinero, procesar Stripe
            if (cardElement && stripe && card) {
                let clientSecret;
                try {
                    const res = await fetch('/order/create-stripe', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await res.json();
                    if (!res.ok || !data.client_secret) {
                        showCheckoutMessage(data.error || 'No se pudo iniciar el pago con tarjeta.');
                        setPayBtnState(false, false);
                        if (emailInput) emailInput.disabled = false;
                        return;
                    }
                    clientSecret = data.client_secret;
                } catch (e) {
                    showCheckoutMessage('Error de red al iniciar el pago con tarjeta.');
                    setPayBtnState(false, false);
                    if (emailInput) emailInput.disabled = false;
                    return;
                }
                const {error, paymentIntent} = await stripe.confirmCardPayment(clientSecret, {
                    payment_method: { card: card, billing_details: { email: email } }
                });
                if (error) {
                    showCheckoutMessage(error.message);
                    setPayBtnState(false, false);
                    if (emailInput) emailInput.disabled = false;
                } else if (paymentIntent && paymentIntent.status === 'succeeded') {
                    showPaymentSuccessUI(email);
                    {% set total_puntos = order.items|map(i => (i.product_snapshot.points is defined ? i.product_snapshot.points : 0) * i.quantity)|reduce((a, b) => a + b) %}
                    fetch('/order/save', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            order: {{ order|json_encode|raw }},
                            email: email,
                            stripe_id: paymentIntent.id,
                            user_id: userId,
                            total_points: {{ total_puntos|default(0) }}
                        })
                    }).then(async res => {
                        if (!res.ok) {
                            const data = await res.json().catch(() => ({}));
                            showCheckoutMessage(data.error || 'Error al guardar el pedido.');
                            setPayBtnState(false, false);
                            if (emailInput) emailInput.disabled = false;
                            return;
                        }
                        const data = await res.json().catch(() => ({}));
                        if (data && typeof data.points_left !== 'undefined') {
                            document.querySelectorAll('.user-points').forEach(function(pointsSpan) {
                                pointsSpan.textContent = data.points_left + ' puntos';
                            });
                        } else if (data && typeof data.points_gained !== 'undefined') {
                            document.querySelectorAll('.user-points').forEach(function(pointsSpan) {
                                const match = pointsSpan.textContent.match(/(\d+)/);
                                const current = match ? parseInt(match[1], 10) : 0;
                                pointsSpan.textContent = (current + data.points_gained) + ' puntos';
                            });
                        }
                        if (data && data.order_id) window._lastOrderId = data.order_id;
                    });
                    fetch('/order/stop');
                }
            }
        }, { once: true }); // Solo un listener
    }
}
document.addEventListener('DOMContentLoaded', setupPaymentLogic);
// Fidelidad: hint de puntos por email
{% if user is not defined or not user %}
document.addEventListener('DOMContentLoaded', function() {
    const emailInput = document.getElementById('checkout-email');
    const cardElementDiv = document.getElementById('card-element');
    if (emailInput) {
        let lastHintEmail = '';
        emailInput.addEventListener('blur', async function() {
            const email = emailInput.value.trim();
            const hintDiv = document.getElementById('fidelity-hint');
            const loginHintDiv = document.getElementById('login-hint');
            hintDiv.classList.add('hidden');
            loginHintDiv.classList.add('hidden');
            if (!email || email === lastHintEmail || !/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) {
                if (cardElementDiv) cardElementDiv.classList.add('hidden');
                return;
            }
            lastHintEmail = email;
            try {
                const res = await fetch('/order/user-by-email?email=' + encodeURIComponent(email));
                const data = await res.json();
                if (data && data.exists) {
                    loginHintDiv.innerHTML = `Este correo ya tiene una cuenta. <a href='/login' class='underline text-blue-700'>Inicia sesión aquí</a> para acumular puntos.`;
                    loginHintDiv.classList.remove('hidden');
                    if (cardElementDiv) cardElementDiv.classList.add('hidden');
                } else if (data && data.points_per_unit && data.points_per_unit > 0) {
                    const total = parseFloat('{{ total_dinero|number_format(2, '.', ',')|replace({',':'.'}) }}');
                    const points = Math.floor(total * data.points_per_unit);
                    hintDiv.textContent = `Si usas una cuenta ganarías ${points} puntos de fidelidad.`;
                    hintDiv.classList.remove('hidden');
                    if (cardElementDiv) cardElementDiv.classList.remove('hidden');
                } else {
                    if (cardElementDiv) cardElementDiv.classList.remove('hidden');
                }
            } catch (e) {
                if (cardElementDiv) cardElementDiv.classList.add('hidden');
            }
        });
    }
});
{% endif %}
</script>
{% endblock %}